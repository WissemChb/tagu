name: RELEASE

on:
  push:
    tags:
      - "*"

jobs:
  RELEASE:
    if: ${{ contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      # release changelog builder doc https://github.com/marketplace/actions/release-changelog-builder#configuration-specification
      - name: Build Changelog
        id: github-release
        uses: mikepenz/release-changelog-builder-action@v1
        with:
          configuration: "changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ steps.github-release.outputs.changelog }}
          draft: false
          prerelease: false
  BUILD:
    if: ${{ contains(github.ref, 'refs/tags/') }}
    needs: [RELEASE]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Go 1.12
        uses: actions/setup-go@v1
        with:
          go-version: 1.18.1

      - name: Build GO application
        id: build
        env:
          PYPI_TOKEN: ${{ secrets.test_pypi_token }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir pkg
          go build
          zip ./pkg/tagu-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip $(ls tagu tagu.exe) LICENSE README.md

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.RELEASE.outputs.release_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./pkg/tagu-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_name: tagu-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_content_type: application/zip

      - name: Remove created release if it failed
        if: ${{ failure() }}
        run: |
          curl \
          -X DELETE \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/WissemChb/tagu/releases/${{ needs.RELEASE.outputs.release_id }}
